version: '3.8'

services:
  ai-os-api:
    image: ghcr.io/pedrovaleriolopez/ai-os:orchestrator
    build:
      context: https://github.com/Pedrovaleriolopez/ai-os.git#main
      dockerfile: Dockerfile.monorepo
      target: orchestrator
    networks:
      - network_public
    environment:
      - NODE_ENV=production
      - PORT=8000
      - REDIS_HOST=redis_redis
      - REDIS_PORT=6379
      - NEO4J_URI=bolt://neo4j_neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=${NEO4J_PASSWORD}
      - POSTGRES_HOST=postgres_postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=ai_os
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - ORCHESTRATOR_API_KEY=${ORCHESTRATOR_API_KEY}
      - UNIVERSAL_MEMORY_API_KEY=${UNIVERSAL_MEMORY_API_KEY}
      - CLAUDE_CODE_API_KEY=${CLAUDE_CODE_API_KEY}
      - GITHUB_TOKEN=${GITHUB_TOKEN}
    volumes:
      - ai-os-data:/data
    deploy:
      replicas: 2
      labels:
        - traefik.enable=true
        - traefik.docker.network=network_public
        - traefik.http.services.ai-os-api.loadbalancer.server.port=8000
        - traefik.http.routers.ai-os-api.rule=Host(`ai-os.allfluence.ai`)
        - traefik.http.routers.ai-os-api.entrypoints=websecure
        - traefik.http.routers.ai-os-api.tls=true
        - traefik.http.routers.ai-os-api.tls.certresolver=letsencryptresolver
        - traefik.http.routers.ai-os-api.service=ai-os-api
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  ai-os-worker:
    image: ghcr.io/pedrovaleriolopez/ai-os:agent-framework
    build:
      context: https://github.com/Pedrovaleriolopez/ai-os.git#main
      dockerfile: Dockerfile.monorepo
      target: agent-framework
    networks:
      - network_public
    environment:
      - NODE_ENV=production
      - REDIS_HOST=redis_redis
      - REDIS_PORT=6379
      - NEO4J_URI=bolt://neo4j_neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=${NEO4J_PASSWORD}
      - POSTGRES_HOST=postgres_postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=ai_os
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - GITHUB_TOKEN=${GITHUB_TOKEN}
    volumes:
      - ai-os-data:/data
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G
    healthcheck:
      test: ["CMD", "pgrep", "-f", "node"]
      interval: 30s
      timeout: 10s
      retries: 3

  ai-os-scheduler:
    image: ghcr.io/pedrovaleriolopez/ai-os:api-gateway  
    build:
      context: https://github.com/Pedrovaleriolopez/ai-os.git#main
      dockerfile: Dockerfile.monorepo
      target: api-gateway
    networks:
      - network_public
    environment:
      - NODE_ENV=production
      - REDIS_HOST=redis_redis
      - REDIS_PORT=6379
      - POSTGRES_HOST=postgres_postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=ai_os
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - GITHUB_TOKEN=${GITHUB_TOKEN}
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD", "pgrep", "-f", "node"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  ai-os-data:
    driver: local

networks:
  network_public:
    external: true