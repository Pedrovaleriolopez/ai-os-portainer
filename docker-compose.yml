version: '3.8'

services:
  ai-os-api:
    image: node:20-alpine
    networks:
      - network_public
    environment:
      - NODE_ENV=production
      - PORT=8000
      - REDIS_HOST=redis_redis
      - REDIS_PORT=6379
      - NEO4J_URI=bolt://neo4j_neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=${NEO4J_PASSWORD}
      - POSTGRES_HOST=postgres_postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=ai_os
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - ORCHESTRATOR_API_KEY=${ORCHESTRATOR_API_KEY}
      - UNIVERSAL_MEMORY_API_KEY=${UNIVERSAL_MEMORY_API_KEY}
      - CLAUDE_CODE_API_KEY=${CLAUDE_CODE_API_KEY}
      - GITHUB_TOKEN=${GITHUB_TOKEN}
    volumes:
      - ai-os-data:/data
    deploy:
      replicas: 2
      labels:
        - traefik.enable=true
        - traefik.docker.network=network_public
        - traefik.http.services.ai-os-api.loadbalancer.server.port=8000
        - traefik.http.routers.ai-os-api.rule=Host(`ai-os.allfluence.ai`)
        - traefik.http.routers.ai-os-api.entrypoints=websecure
        - traefik.http.routers.ai-os-api.tls=true
        - traefik.http.routers.ai-os-api.tls.certresolver=letsencryptresolver
        - traefik.http.routers.ai-os-api.service=ai-os-api
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    command:
      - sh
      - -c
      - |
        set -e
        echo "=== Iniciando deploy AI-OS API ==="
        
        # Instalar git
        apk add --no-cache git
        
        # Clonar o repositório correto
        cd /tmp
        rm -rf ai-os
        git clone https://${GITHUB_TOKEN}@github.com/Pedrovaleriolopez/ai-os.git
        cd ai-os
        
        echo "=== Estrutura do repositório ==="
        ls -la
        
        # Verificar se existe services/api-gateway
        if [ -d "services/api-gateway" ]; then
          echo "Encontrado services/api-gateway"
          cd services/api-gateway
        elif [ -d "packages/orchestrator" ]; then
          echo "Usando packages/orchestrator como API"
          cd packages/orchestrator
        else
          echo "Usando raiz do projeto"
        fi
        
        # Instalar dependências
        echo "Instalando dependências..."
        npm install --production
        
        # Tentar diferentes comandos de start
        echo "Iniciando aplicação..."
        npm run start:api || npm run start || npm run dev || node index.js || node server.js || node src/index.js
    working_dir: /app
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 240s

  ai-os-worker:
    image: node:20-alpine
    networks:
      - network_public
    environment:
      - NODE_ENV=production
      - REDIS_HOST=redis_redis
      - REDIS_PORT=6379
      - NEO4J_URI=bolt://neo4j_neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=${NEO4J_PASSWORD}
      - POSTGRES_HOST=postgres_postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=ai_os
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - GITHUB_TOKEN=${GITHUB_TOKEN}
    volumes:
      - ai-os-data:/data
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G
    command:
      - sh
      - -c
      - |
        set -e
        echo "=== Iniciando deploy AI-OS Worker ==="
        
        # Instalar git
        apk add --no-cache git
        
        # Clonar o repositório
        cd /tmp
        rm -rf ai-os
        git clone https://${GITHUB_TOKEN}@github.com/Pedrovaleriolopez/ai-os.git
        cd ai-os
        
        echo "=== Estrutura do repositório ==="
        ls -la
        
        # Navegar para o diretório apropriado
        if [ -d "services/webhook-handler" ]; then
          echo "Encontrado services/webhook-handler"
          cd services/webhook-handler
        elif [ -d "packages/agent-framework" ]; then
          echo "Usando packages/agent-framework como Worker"
          cd packages/agent-framework
        else
          echo "Usando raiz do projeto"
        fi
        
        # Instalar dependências
        echo "Instalando dependências..."
        npm install --production
        
        # Iniciar worker
        echo "Iniciando worker..."
        npm run start:worker || npm run worker || npm run start || node worker.js || node src/worker.js
    working_dir: /app

  ai-os-scheduler:
    image: node:20-alpine
    networks:
      - network_public
    environment:
      - NODE_ENV=production
      - REDIS_HOST=redis_redis
      - REDIS_PORT=6379
      - POSTGRES_HOST=postgres_postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=ai_os
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - GITHUB_TOKEN=${GITHUB_TOKEN}
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    command:
      - sh
      - -c
      - |
        set -e
        echo "=== Iniciando deploy AI-OS Scheduler ==="
        
        # Instalar git
        apk add --no-cache git
        
        # Clonar o repositório
        cd /tmp
        rm -rf ai-os
        git clone https://${GITHUB_TOKEN}@github.com/Pedrovaleriolopez/ai-os.git
        cd ai-os
        
        echo "=== Estrutura do repositório ==="
        ls -la
        
        # Por enquanto, usar um scheduler simples
        echo "Criando scheduler básico..."
        cat > scheduler.js << 'EOF'
        const Redis = require('redis');
        
        console.log('AI-OS Scheduler iniciado');
        
        // Configuração Redis
        const redis = Redis.createClient({
          url: 'redis://redis_redis:6379'
        });
        
        redis.on('error', err => console.log('Redis Error', err));
        
        async function run() {
          await redis.connect();
          console.log('Conectado ao Redis');
          
          // Loop principal do scheduler
          setInterval(() => {
            console.log('Scheduler tick:', new Date().toISOString());
          }, 60000); // A cada minuto
        }
        
        run().catch(console.error);
        EOF
        
        # Instalar apenas o Redis
        npm init -y
        npm install redis
        
        # Executar scheduler
        node scheduler.js
    working_dir: /app

volumes:
  ai-os-data:
    driver: local

networks:
  network_public:
    external: true